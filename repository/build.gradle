apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.compileSdk

    defaultConfig {
        minSdkVersion rootProject.minSdk
        targetSdkVersion rootProject.targetSdk

        buildConfigField 'String', 'BASE_URL', '"https://newsapi.org"'
        buildConfigField 'String', 'YOUTUBE_BASE_URL', '"https://www.googleapis.com/youtube/v3/"'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    androidExtensions {
        experimental = true
    }
}

dependencies {

    implementation project(':core')

    //Gson
    api 'com.google.code.gson:gson:' + rootProject.gsonVersion

    //Retrofit
    api 'com.squareup.retrofit2:retrofit:' + rootProject.retrofitVersion
    api 'com.squareup.retrofit2:converter-gson:' + rootProject.retrofitVersion

    //Room
    api  'androidx.room:room-runtime:' + rootProject.roomVersion
    api 'androidx.room:room-ktx:' + rootProject.roomVersion
    kapt 'androidx.room:room-compiler:' + rootProject.roomVersion

    //Dagger
    kapt 'com.google.dagger:dagger-compiler:' + rootProject.daggerVersion

    //Testing
    testImplementation 'junit:junit:' + rootProject.jUnitVersion
    testImplementation 'androidx.arch.core:core-testing:' + rootProject.lifecycleVersion
    testImplementation 'org.mockito:mockito-inline:' + rootProject.mockitoInlineVersion
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:' + rootProject.mockitoKotlinVersion
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:' + rootProject.coroutinesTestVersion
}
